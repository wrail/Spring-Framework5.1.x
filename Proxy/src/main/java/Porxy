# Java实现代理的两种方法


## 静态代理

### 继承
代理对象继承目标对象，重写需要增强的方法，如ExtendProxy里代码
缺点：情况复杂，类爆炸严重

### 聚合
代理对象中包含目标对象并实现和目标对象相同的接口，如CompositeProxy里代码
缺点：类爆炸也存在，但比继承少一些
> 继承和聚合那个好呢？
> 如果一个需求需要实现日志和权限验证，那么对于继承来说，那么就需要两个代理类来实现这个功能，如果这两个功能顺序变了这个代理类还要进行重写
> 而聚合只需要写一个日志的代理类和一个权限验证的代理类。然后可以通过传入target类来实现，比如先日志后校验，那么就先OrderDao target1 = new TimeProxy（target） 然后 OrderDao dao = new PowerProxy（target1）
> 两种方式都会产生类爆炸，聚合相对于继承产生了类比较少

### 使用
如果需要代理的是确定的，就可以使用静态代理，如果需求变动严重就使用动态代理

### 和装饰者模式的区别

装饰者通过构造方法传参，而且传入的参数**只能**是被装饰对象，而代理也可以通过setter传参，并且代理的对象可以是一个Object


